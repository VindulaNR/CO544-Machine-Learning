#!/usr/bin/env python
# coding: utf-8

# # Welcome to Jupyter!

# In[3]:

3(a)

import numpy as np # import numpy module as np
a=np.array([1,2,3]) # Creating 1D array
a

# In[4]:
a.dtype # return the data type of the array

# In[38]:
matrix = np.array ([np.arange (4), [i for i in range(1 ,5)],[6 ,17 ,8,9]])
matrix

3(b)

np.zeros((5,2,2),dtype=float)
np.ones((4,5))
np.empty([3,4])
np.arange (2 ,10 ,2)
np.arange (2 ,10 ,1).reshape(4,2)
np.full ([2 ,3] , 4)
np.eye(3, k=1) #using eye can offset the diaganl val
np.identity(4)


3(c)

np.copy(matrix)

matrix.view()

matrix.sort()
matrix

matrix.sort(axis=1)
matrix

test=np.array([[32,2,6,7],[9,6,8,14],[12,5,13,7]])
test
test.sort(axis=0)
test

test [0: ,:1]

matrix [:2, 0:2]


3(d)


matrix [:1, :]

matrix1=np.array([[1,2,3],[4,5,6],[7,8,9]])
matrix1

matrix1 [0] = 42
matrix1

matrix1 [1:3]

matrix1 [0,0]=9
matrix1

matrix1 [1:]

matrix1 [1:,:2]

matrix1 [1:,1:]

matrix1 [:2, 1:]

matrix.ravel ()


Multiplication

x1=np.array([[1,2,3],[1,2,3],[1,2,3]])
x1
x2=np.array([[4,5,6],[4,5,6],[4,5,6]])
x2


x3=np.random.randint(-3,3,(3,4))
x3

x4=np.random.randint(-3,3,(4,3))
x4

temp=np.matmul(x4,x3)
temp


###################################
###################################
#excersice
#3.f the random walk path
#taken 500 steps and walk between 0 to 10

import random
import numpy as np
  
# Probability to move up or down
prob = [0.5, 0.5]  
  
# Get random starting point
start = random.randint(0,10)  
positions = [start]
  
# creating the random points
rr = np.random.random(500)
downp = rr < prob[0]
upp = rr > prob[1]
print(downp)
  
for idownp, iupp in zip(downp, upp):
    down = idownp and positions[-1] > 0
    up = iupp and positions[-1] < 10
    positions.append(positions[-1] - down + up)

print(positions)